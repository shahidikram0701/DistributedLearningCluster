// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: introducer_proto/introducer.proto

package introducer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IntroducerClient is the client API for Introducer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IntroducerClient interface {
	Introduce(ctx context.Context, in *IntroduceRequest, opts ...grpc.CallOption) (*IntroduceReply, error)
}

type introducerClient struct {
	cc grpc.ClientConnInterface
}

func NewIntroducerClient(cc grpc.ClientConnInterface) IntroducerClient {
	return &introducerClient{cc}
}

func (c *introducerClient) Introduce(ctx context.Context, in *IntroduceRequest, opts ...grpc.CallOption) (*IntroduceReply, error) {
	out := new(IntroduceReply)
	err := c.cc.Invoke(ctx, "/introducer.Introducer/Introduce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IntroducerServer is the server API for Introducer service.
// All implementations must embed UnimplementedIntroducerServer
// for forward compatibility
type IntroducerServer interface {
	Introduce(context.Context, *IntroduceRequest) (*IntroduceReply, error)
	mustEmbedUnimplementedIntroducerServer()
}

// UnimplementedIntroducerServer must be embedded to have forward compatible implementations.
type UnimplementedIntroducerServer struct {
}

func (UnimplementedIntroducerServer) Introduce(context.Context, *IntroduceRequest) (*IntroduceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Introduce not implemented")
}
func (UnimplementedIntroducerServer) mustEmbedUnimplementedIntroducerServer() {}

// UnsafeIntroducerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IntroducerServer will
// result in compilation errors.
type UnsafeIntroducerServer interface {
	mustEmbedUnimplementedIntroducerServer()
}

func RegisterIntroducerServer(s grpc.ServiceRegistrar, srv IntroducerServer) {
	s.RegisterService(&Introducer_ServiceDesc, srv)
}

func _Introducer_Introduce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntroduceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntroducerServer).Introduce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/introducer.Introducer/Introduce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntroducerServer).Introduce(ctx, req.(*IntroduceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Introducer_ServiceDesc is the grpc.ServiceDesc for Introducer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Introducer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "introducer.Introducer",
	HandlerType: (*IntroducerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Introduce",
			Handler:    _Introducer_Introduce_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "introducer_proto/introducer.proto",
}
