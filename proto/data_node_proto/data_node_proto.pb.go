// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.5
// source: data_node_proto.proto

package process

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DataNode_CommitDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filename       string `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
	SequenceNumber int64  `protobuf:"varint,2,opt,name=sequenceNumber,proto3" json:"sequenceNumber,omitempty"`
	IsReplica      bool   `protobuf:"varint,3,opt,name=isReplica,proto3" json:"isReplica,omitempty"`
}

func (x *DataNode_CommitDeleteRequest) Reset() {
	*x = DataNode_CommitDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_proto_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataNode_CommitDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataNode_CommitDeleteRequest) ProtoMessage() {}

func (x *DataNode_CommitDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_proto_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataNode_CommitDeleteRequest.ProtoReflect.Descriptor instead.
func (*DataNode_CommitDeleteRequest) Descriptor() ([]byte, []int) {
	return file_data_node_proto_proto_rawDescGZIP(), []int{0}
}

func (x *DataNode_CommitDeleteRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *DataNode_CommitDeleteRequest) GetSequenceNumber() int64 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

func (x *DataNode_CommitDeleteRequest) GetIsReplica() bool {
	if x != nil {
		return x.IsReplica
	}
	return false
}

type DataNode_CommitDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status bool `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *DataNode_CommitDeleteResponse) Reset() {
	*x = DataNode_CommitDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_proto_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataNode_CommitDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataNode_CommitDeleteResponse) ProtoMessage() {}

func (x *DataNode_CommitDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_proto_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataNode_CommitDeleteResponse.ProtoReflect.Descriptor instead.
func (*DataNode_CommitDeleteResponse) Descriptor() ([]byte, []int) {
	return file_data_node_proto_proto_rawDescGZIP(), []int{1}
}

func (x *DataNode_CommitDeleteResponse) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

type DataNode_DeleteFileQuorumCheckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filename       string   `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
	SequenceNumber int64    `protobuf:"varint,2,opt,name=sequenceNumber,proto3" json:"sequenceNumber,omitempty"`
	Replicas       []string `protobuf:"bytes,3,rep,name=replicas,proto3" json:"replicas,omitempty"`
	IsReplica      bool     `protobuf:"varint,4,opt,name=isReplica,proto3" json:"isReplica,omitempty"`
}

func (x *DataNode_DeleteFileQuorumCheckRequest) Reset() {
	*x = DataNode_DeleteFileQuorumCheckRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_proto_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataNode_DeleteFileQuorumCheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataNode_DeleteFileQuorumCheckRequest) ProtoMessage() {}

func (x *DataNode_DeleteFileQuorumCheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_proto_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataNode_DeleteFileQuorumCheckRequest.ProtoReflect.Descriptor instead.
func (*DataNode_DeleteFileQuorumCheckRequest) Descriptor() ([]byte, []int) {
	return file_data_node_proto_proto_rawDescGZIP(), []int{2}
}

func (x *DataNode_DeleteFileQuorumCheckRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *DataNode_DeleteFileQuorumCheckRequest) GetSequenceNumber() int64 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

func (x *DataNode_DeleteFileQuorumCheckRequest) GetReplicas() []string {
	if x != nil {
		return x.Replicas
	}
	return nil
}

func (x *DataNode_DeleteFileQuorumCheckRequest) GetIsReplica() bool {
	if x != nil {
		return x.IsReplica
	}
	return false
}

type DataNode_DeleteFileQuorumCheckResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status bool `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *DataNode_DeleteFileQuorumCheckResponse) Reset() {
	*x = DataNode_DeleteFileQuorumCheckResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_proto_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataNode_DeleteFileQuorumCheckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataNode_DeleteFileQuorumCheckResponse) ProtoMessage() {}

func (x *DataNode_DeleteFileQuorumCheckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_proto_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataNode_DeleteFileQuorumCheckResponse.ProtoReflect.Descriptor instead.
func (*DataNode_DeleteFileQuorumCheckResponse) Descriptor() ([]byte, []int) {
	return file_data_node_proto_proto_rawDescGZIP(), []int{3}
}

func (x *DataNode_DeleteFileQuorumCheckResponse) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

type DataNode_GetFileQuorumRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filename string `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
	Version  int64  `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *DataNode_GetFileQuorumRequest) Reset() {
	*x = DataNode_GetFileQuorumRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_proto_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataNode_GetFileQuorumRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataNode_GetFileQuorumRequest) ProtoMessage() {}

func (x *DataNode_GetFileQuorumRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_proto_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataNode_GetFileQuorumRequest.ProtoReflect.Descriptor instead.
func (*DataNode_GetFileQuorumRequest) Descriptor() ([]byte, []int) {
	return file_data_node_proto_proto_rawDescGZIP(), []int{4}
}

func (x *DataNode_GetFileQuorumRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *DataNode_GetFileQuorumRequest) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

type DataNode_GetFileQuorumResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status bool `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *DataNode_GetFileQuorumResponse) Reset() {
	*x = DataNode_GetFileQuorumResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_proto_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataNode_GetFileQuorumResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataNode_GetFileQuorumResponse) ProtoMessage() {}

func (x *DataNode_GetFileQuorumResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_proto_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataNode_GetFileQuorumResponse.ProtoReflect.Descriptor instead.
func (*DataNode_GetFileQuorumResponse) Descriptor() ([]byte, []int) {
	return file_data_node_proto_proto_rawDescGZIP(), []int{5}
}

func (x *DataNode_GetFileQuorumResponse) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

type Chunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChunkId        int64    `protobuf:"varint,1,opt,name=chunkId,proto3" json:"chunkId,omitempty"`
	Filename       string   `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"`
	Version        int64    `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
	Filesize       int64    `protobuf:"varint,4,opt,name=filesize,proto3" json:"filesize,omitempty"`
	Chunk          []byte   `protobuf:"bytes,5,opt,name=chunk,proto3" json:"chunk,omitempty"`
	SequenceNumber int64    `protobuf:"varint,6,opt,name=sequenceNumber,proto3" json:"sequenceNumber,omitempty"`
	ReplicaNodes   []string `protobuf:"bytes,7,rep,name=replicaNodes,proto3" json:"replicaNodes,omitempty"`
	IsReplicaChunk bool     `protobuf:"varint,8,opt,name=isReplicaChunk,proto3" json:"isReplicaChunk,omitempty"`
}

func (x *Chunk) Reset() {
	*x = Chunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_proto_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Chunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chunk) ProtoMessage() {}

func (x *Chunk) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_proto_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chunk.ProtoReflect.Descriptor instead.
func (*Chunk) Descriptor() ([]byte, []int) {
	return file_data_node_proto_proto_rawDescGZIP(), []int{6}
}

func (x *Chunk) GetChunkId() int64 {
	if x != nil {
		return x.ChunkId
	}
	return 0
}

func (x *Chunk) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *Chunk) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Chunk) GetFilesize() int64 {
	if x != nil {
		return x.Filesize
	}
	return 0
}

func (x *Chunk) GetChunk() []byte {
	if x != nil {
		return x.Chunk
	}
	return nil
}

func (x *Chunk) GetSequenceNumber() int64 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

func (x *Chunk) GetReplicaNodes() []string {
	if x != nil {
		return x.ReplicaNodes
	}
	return nil
}

func (x *Chunk) GetIsReplicaChunk() bool {
	if x != nil {
		return x.IsReplicaChunk
	}
	return false
}

type FileChunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChunkId         int64  `protobuf:"varint,1,opt,name=chunkId,proto3" json:"chunkId,omitempty"`
	Filename        string `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"`
	Version         int64  `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
	Chunk           []byte `protobuf:"bytes,5,opt,name=chunk,proto3" json:"chunk,omitempty"`
	SequenceNumber  int64  `protobuf:"varint,6,opt,name=sequenceNumber,proto3" json:"sequenceNumber,omitempty"`
	PreCommitBuffer []byte `protobuf:"bytes,7,opt,name=preCommitBuffer,proto3" json:"preCommitBuffer,omitempty"` // int64 versionMapping = 8;
}

func (x *FileChunk) Reset() {
	*x = FileChunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_proto_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileChunk) ProtoMessage() {}

func (x *FileChunk) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_proto_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileChunk.ProtoReflect.Descriptor instead.
func (*FileChunk) Descriptor() ([]byte, []int) {
	return file_data_node_proto_proto_rawDescGZIP(), []int{7}
}

func (x *FileChunk) GetChunkId() int64 {
	if x != nil {
		return x.ChunkId
	}
	return 0
}

func (x *FileChunk) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *FileChunk) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *FileChunk) GetChunk() []byte {
	if x != nil {
		return x.Chunk
	}
	return nil
}

func (x *FileChunk) GetSequenceNumber() int64 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

func (x *FileChunk) GetPreCommitBuffer() []byte {
	if x != nil {
		return x.PreCommitBuffer
	}
	return nil
}

type DataNode_PutFile_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status bool `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *DataNode_PutFile_Response) Reset() {
	*x = DataNode_PutFile_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_proto_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataNode_PutFile_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataNode_PutFile_Response) ProtoMessage() {}

func (x *DataNode_PutFile_Response) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_proto_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataNode_PutFile_Response.ProtoReflect.Descriptor instead.
func (*DataNode_PutFile_Response) Descriptor() ([]byte, []int) {
	return file_data_node_proto_proto_rawDescGZIP(), []int{8}
}

func (x *DataNode_PutFile_Response) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

type DataNode_CommitFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filename       string `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
	SequenceNumber int64  `protobuf:"varint,2,opt,name=sequenceNumber,proto3" json:"sequenceNumber,omitempty"`
	IsReplica      bool   `protobuf:"varint,3,opt,name=isReplica,proto3" json:"isReplica,omitempty"`
}

func (x *DataNode_CommitFileRequest) Reset() {
	*x = DataNode_CommitFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_proto_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataNode_CommitFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataNode_CommitFileRequest) ProtoMessage() {}

func (x *DataNode_CommitFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_proto_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataNode_CommitFileRequest.ProtoReflect.Descriptor instead.
func (*DataNode_CommitFileRequest) Descriptor() ([]byte, []int) {
	return file_data_node_proto_proto_rawDescGZIP(), []int{9}
}

func (x *DataNode_CommitFileRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *DataNode_CommitFileRequest) GetSequenceNumber() int64 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

func (x *DataNode_CommitFileRequest) GetIsReplica() bool {
	if x != nil {
		return x.IsReplica
	}
	return false
}

type DataNode_CommitFileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  bool  `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Version int64 `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *DataNode_CommitFileResponse) Reset() {
	*x = DataNode_CommitFileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_proto_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataNode_CommitFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataNode_CommitFileResponse) ProtoMessage() {}

func (x *DataNode_CommitFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_proto_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataNode_CommitFileResponse.ProtoReflect.Descriptor instead.
func (*DataNode_CommitFileResponse) Descriptor() ([]byte, []int) {
	return file_data_node_proto_proto_rawDescGZIP(), []int{10}
}

func (x *DataNode_CommitFileResponse) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *DataNode_CommitFileResponse) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

type DataNode_UpdateSequenceNumberRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filename       string `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
	SequenceNumber int64  `protobuf:"varint,2,opt,name=sequenceNumber,proto3" json:"sequenceNumber,omitempty"`
}

func (x *DataNode_UpdateSequenceNumberRequest) Reset() {
	*x = DataNode_UpdateSequenceNumberRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_proto_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataNode_UpdateSequenceNumberRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataNode_UpdateSequenceNumberRequest) ProtoMessage() {}

func (x *DataNode_UpdateSequenceNumberRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_proto_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataNode_UpdateSequenceNumberRequest.ProtoReflect.Descriptor instead.
func (*DataNode_UpdateSequenceNumberRequest) Descriptor() ([]byte, []int) {
	return file_data_node_proto_proto_rawDescGZIP(), []int{11}
}

func (x *DataNode_UpdateSequenceNumberRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *DataNode_UpdateSequenceNumberRequest) GetSequenceNumber() int64 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

type DataNode_UpdateSequenceNumberResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DataNode_UpdateSequenceNumberResponse) Reset() {
	*x = DataNode_UpdateSequenceNumberResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_proto_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataNode_UpdateSequenceNumberResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataNode_UpdateSequenceNumberResponse) ProtoMessage() {}

func (x *DataNode_UpdateSequenceNumberResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_proto_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataNode_UpdateSequenceNumberResponse.ProtoReflect.Descriptor instead.
func (*DataNode_UpdateSequenceNumberResponse) Descriptor() ([]byte, []int) {
	return file_data_node_proto_proto_rawDescGZIP(), []int{12}
}

type DataNode_InitiateReplicaRecoveryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filename                string `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
	NodeToReplicateDataFrom string `protobuf:"bytes,2,opt,name=nodeToReplicateDataFrom,proto3" json:"nodeToReplicateDataFrom,omitempty"`
}

func (x *DataNode_InitiateReplicaRecoveryRequest) Reset() {
	*x = DataNode_InitiateReplicaRecoveryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_proto_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataNode_InitiateReplicaRecoveryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataNode_InitiateReplicaRecoveryRequest) ProtoMessage() {}

func (x *DataNode_InitiateReplicaRecoveryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_proto_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataNode_InitiateReplicaRecoveryRequest.ProtoReflect.Descriptor instead.
func (*DataNode_InitiateReplicaRecoveryRequest) Descriptor() ([]byte, []int) {
	return file_data_node_proto_proto_rawDescGZIP(), []int{13}
}

func (x *DataNode_InitiateReplicaRecoveryRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *DataNode_InitiateReplicaRecoveryRequest) GetNodeToReplicateDataFrom() string {
	if x != nil {
		return x.NodeToReplicateDataFrom
	}
	return ""
}

type DataNode_GetFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filename       string   `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
	SequenceNumber int64    `protobuf:"varint,2,opt,name=sequenceNumber,proto3" json:"sequenceNumber,omitempty"`
	Replicas       []string `protobuf:"bytes,3,rep,name=replicas,proto3" json:"replicas,omitempty"`
	Version        int64    `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *DataNode_GetFileRequest) Reset() {
	*x = DataNode_GetFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_proto_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataNode_GetFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataNode_GetFileRequest) ProtoMessage() {}

func (x *DataNode_GetFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_proto_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataNode_GetFileRequest.ProtoReflect.Descriptor instead.
func (*DataNode_GetFileRequest) Descriptor() ([]byte, []int) {
	return file_data_node_proto_proto_rawDescGZIP(), []int{14}
}

func (x *DataNode_GetFileRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *DataNode_GetFileRequest) GetSequenceNumber() int64 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

func (x *DataNode_GetFileRequest) GetReplicas() []string {
	if x != nil {
		return x.Replicas
	}
	return nil
}

func (x *DataNode_GetFileRequest) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

type DataNode_InitiateReplicaRecoveryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status bool `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *DataNode_InitiateReplicaRecoveryResponse) Reset() {
	*x = DataNode_InitiateReplicaRecoveryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_proto_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataNode_InitiateReplicaRecoveryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataNode_InitiateReplicaRecoveryResponse) ProtoMessage() {}

func (x *DataNode_InitiateReplicaRecoveryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_proto_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataNode_InitiateReplicaRecoveryResponse.ProtoReflect.Descriptor instead.
func (*DataNode_InitiateReplicaRecoveryResponse) Descriptor() ([]byte, []int) {
	return file_data_node_proto_proto_rawDescGZIP(), []int{15}
}

func (x *DataNode_InitiateReplicaRecoveryResponse) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

type DataNode_ReplicaRecoveryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filename string `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
}

func (x *DataNode_ReplicaRecoveryRequest) Reset() {
	*x = DataNode_ReplicaRecoveryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_proto_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataNode_ReplicaRecoveryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataNode_ReplicaRecoveryRequest) ProtoMessage() {}

func (x *DataNode_ReplicaRecoveryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_proto_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataNode_ReplicaRecoveryRequest.ProtoReflect.Descriptor instead.
func (*DataNode_ReplicaRecoveryRequest) Descriptor() ([]byte, []int) {
	return file_data_node_proto_proto_rawDescGZIP(), []int{16}
}

func (x *DataNode_ReplicaRecoveryRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

var File_data_node_proto_proto protoreflect.FileDescriptor

var file_data_node_proto_proto_rawDesc = []byte{
	0x0a, 0x15, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x22, 0x80, 0x01, 0x0a, 0x1c, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a,
	0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x52, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x22, 0x37, 0x0a, 0x1d, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x5f,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xa5, 0x01, 0x0a,
	0x25, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x5f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x46, 0x69, 0x6c, 0x65, 0x51, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x52, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x22, 0x40, 0x0a, 0x26, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65,
	0x5f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x51, 0x75, 0x6f, 0x72, 0x75,
	0x6d, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x55, 0x0a, 0x1d, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x6f,
	0x64, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x51, 0x75, 0x6f, 0x72, 0x75, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x38, 0x0a,
	0x1e, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c,
	0x65, 0x51, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xfd, 0x01, 0x0a, 0x05, 0x43, 0x68, 0x75, 0x6e,
	0x6b, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x66,
	0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66,
	0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x63, 0x68,
	0x75, 0x6e, 0x6b, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x72,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12,
	0x26, 0x0a, 0x0e, 0x69, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x43, 0x68, 0x75, 0x6e,
	0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x22, 0xc3, 0x01, 0x0a, 0x09, 0x46, 0x69, 0x6c, 0x65,
	0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x26, 0x0a, 0x0e, 0x73,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x70, 0x72,
	0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x22, 0x33, 0x0a,
	0x19, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x5f, 0x50, 0x75, 0x74, 0x46, 0x69, 0x6c,
	0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x7e, 0x0a, 0x1a, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x5f, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x22, 0x4f, 0x0a, 0x1b, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x5f, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0x6a, 0x0a, 0x24, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x5f,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x66,
	0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66,
	0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22,
	0x27, 0x0a, 0x25, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x5f, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7f, 0x0a, 0x27, 0x44, 0x61, 0x74, 0x61,
	0x4e, 0x6f, 0x64, 0x65, 0x5f, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x38, 0x0a, 0x17, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x17, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x46, 0x72, 0x6f, 0x6d, 0x22, 0x93, 0x01, 0x0a, 0x17, 0x44, 0x61,
	0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x42, 0x0a, 0x28, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x5f, 0x49, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x52, 0x65, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x3d, 0x0a, 0x1f, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x5f,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x32, 0xd9, 0x07, 0x0a, 0x0f, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4a, 0x0a, 0x10, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x6f,
	0x64, 0x65, 0x5f, 0x50, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x0e, 0x2e, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x1a, 0x22, 0x2e, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x5f, 0x50, 0x75,
	0x74, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x28, 0x01, 0x12, 0x62, 0x0a, 0x13, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x5f, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24,
	0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64,
	0x65, 0x5f, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x80, 0x01, 0x0a, 0x1d, 0x44, 0x61, 0x74, 0x61, 0x4e,
	0x6f, 0x64, 0x65, 0x5f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x5f, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x5f, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x89, 0x01, 0x0a, 0x20, 0x44, 0x61,
	0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x5f, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x12, 0x30,
	0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64,
	0x65, 0x5f, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4e,
	0x6f, 0x64, 0x65, 0x5f, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x18, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64,
	0x65, 0x5f, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x12, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x4e, 0x6f, 0x64, 0x65, 0x5f, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x52, 0x65, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x22,
	0x00, 0x30, 0x01, 0x12, 0x4c, 0x0a, 0x10, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x5f,
	0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x46, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x22, 0x00, 0x30,
	0x01, 0x12, 0x6b, 0x0a, 0x16, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x5f, 0x47, 0x65,
	0x74, 0x46, 0x69, 0x6c, 0x65, 0x51, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x12, 0x26, 0x2e, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x5f, 0x47,
	0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x51, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x51, 0x75,
	0x6f, 0x72, 0x75, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x83,
	0x01, 0x0a, 0x1e, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x5f, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x51, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x12, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x4e, 0x6f, 0x64, 0x65, 0x5f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x51,
	0x75, 0x6f, 0x72, 0x75, 0x6d, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x4e, 0x6f, 0x64, 0x65, 0x5f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x51,
	0x75, 0x6f, 0x72, 0x75, 0x6d, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x68, 0x0a, 0x15, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65,
	0x5f, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x25, 0x2e,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65,
	0x5f, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x12,
	0x5a, 0x10, 0x63, 0x73, 0x34, 0x32, 0x35, 0x2f, 0x6d, 0x70, 0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_data_node_proto_proto_rawDescOnce sync.Once
	file_data_node_proto_proto_rawDescData = file_data_node_proto_proto_rawDesc
)

func file_data_node_proto_proto_rawDescGZIP() []byte {
	file_data_node_proto_proto_rawDescOnce.Do(func() {
		file_data_node_proto_proto_rawDescData = protoimpl.X.CompressGZIP(file_data_node_proto_proto_rawDescData)
	})
	return file_data_node_proto_proto_rawDescData
}

var file_data_node_proto_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_data_node_proto_proto_goTypes = []interface{}{
	(*DataNode_CommitDeleteRequest)(nil),             // 0: process.DataNode_CommitDeleteRequest
	(*DataNode_CommitDeleteResponse)(nil),            // 1: process.DataNode_CommitDeleteResponse
	(*DataNode_DeleteFileQuorumCheckRequest)(nil),    // 2: process.DataNode_DeleteFileQuorumCheckRequest
	(*DataNode_DeleteFileQuorumCheckResponse)(nil),   // 3: process.DataNode_DeleteFileQuorumCheckResponse
	(*DataNode_GetFileQuorumRequest)(nil),            // 4: process.DataNode_GetFileQuorumRequest
	(*DataNode_GetFileQuorumResponse)(nil),           // 5: process.DataNode_GetFileQuorumResponse
	(*Chunk)(nil),                                    // 6: process.Chunk
	(*FileChunk)(nil),                                // 7: process.FileChunk
	(*DataNode_PutFile_Response)(nil),                // 8: process.DataNode_PutFile_Response
	(*DataNode_CommitFileRequest)(nil),               // 9: process.DataNode_CommitFileRequest
	(*DataNode_CommitFileResponse)(nil),              // 10: process.DataNode_CommitFileResponse
	(*DataNode_UpdateSequenceNumberRequest)(nil),     // 11: process.DataNode_UpdateSequenceNumberRequest
	(*DataNode_UpdateSequenceNumberResponse)(nil),    // 12: process.DataNode_UpdateSequenceNumberResponse
	(*DataNode_InitiateReplicaRecoveryRequest)(nil),  // 13: process.DataNode_InitiateReplicaRecoveryRequest
	(*DataNode_GetFileRequest)(nil),                  // 14: process.DataNode_GetFileRequest
	(*DataNode_InitiateReplicaRecoveryResponse)(nil), // 15: process.DataNode_InitiateReplicaRecoveryResponse
	(*DataNode_ReplicaRecoveryRequest)(nil),          // 16: process.DataNode_ReplicaRecoveryRequest
}
var file_data_node_proto_proto_depIdxs = []int32{
	6,  // 0: process.DataNodeService.DataNode_PutFile:input_type -> process.Chunk
	9,  // 1: process.DataNodeService.DataNode_CommitFile:input_type -> process.DataNode_CommitFileRequest
	11, // 2: process.DataNodeService.DataNode_UpdateSequenceNumber:input_type -> process.DataNode_UpdateSequenceNumberRequest
	13, // 3: process.DataNodeService.DataNode_InitiateReplicaRecovery:input_type -> process.DataNode_InitiateReplicaRecoveryRequest
	16, // 4: process.DataNodeService.DataNode_ReplicaRecovery:input_type -> process.DataNode_ReplicaRecoveryRequest
	14, // 5: process.DataNodeService.DataNode_GetFile:input_type -> process.DataNode_GetFileRequest
	4,  // 6: process.DataNodeService.DataNode_GetFileQuorum:input_type -> process.DataNode_GetFileQuorumRequest
	2,  // 7: process.DataNodeService.DataNode_DeleteFileQuorumCheck:input_type -> process.DataNode_DeleteFileQuorumCheckRequest
	0,  // 8: process.DataNodeService.DataNode_CommitDelete:input_type -> process.DataNode_CommitDeleteRequest
	8,  // 9: process.DataNodeService.DataNode_PutFile:output_type -> process.DataNode_PutFile_Response
	10, // 10: process.DataNodeService.DataNode_CommitFile:output_type -> process.DataNode_CommitFileResponse
	12, // 11: process.DataNodeService.DataNode_UpdateSequenceNumber:output_type -> process.DataNode_UpdateSequenceNumberResponse
	15, // 12: process.DataNodeService.DataNode_InitiateReplicaRecovery:output_type -> process.DataNode_InitiateReplicaRecoveryResponse
	7,  // 13: process.DataNodeService.DataNode_ReplicaRecovery:output_type -> process.FileChunk
	7,  // 14: process.DataNodeService.DataNode_GetFile:output_type -> process.FileChunk
	5,  // 15: process.DataNodeService.DataNode_GetFileQuorum:output_type -> process.DataNode_GetFileQuorumResponse
	3,  // 16: process.DataNodeService.DataNode_DeleteFileQuorumCheck:output_type -> process.DataNode_DeleteFileQuorumCheckResponse
	1,  // 17: process.DataNodeService.DataNode_CommitDelete:output_type -> process.DataNode_CommitDeleteResponse
	9,  // [9:18] is the sub-list for method output_type
	0,  // [0:9] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_data_node_proto_proto_init() }
func file_data_node_proto_proto_init() {
	if File_data_node_proto_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_data_node_proto_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataNode_CommitDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_proto_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataNode_CommitDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_proto_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataNode_DeleteFileQuorumCheckRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_proto_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataNode_DeleteFileQuorumCheckResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_proto_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataNode_GetFileQuorumRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_proto_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataNode_GetFileQuorumResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_proto_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Chunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_proto_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileChunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_proto_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataNode_PutFile_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_proto_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataNode_CommitFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_proto_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataNode_CommitFileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_proto_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataNode_UpdateSequenceNumberRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_proto_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataNode_UpdateSequenceNumberResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_proto_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataNode_InitiateReplicaRecoveryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_proto_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataNode_GetFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_proto_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataNode_InitiateReplicaRecoveryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_proto_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataNode_ReplicaRecoveryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_data_node_proto_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_data_node_proto_proto_goTypes,
		DependencyIndexes: file_data_node_proto_proto_depIdxs,
		MessageInfos:      file_data_node_proto_proto_msgTypes,
	}.Build()
	File_data_node_proto_proto = out.File
	file_data_node_proto_proto_rawDesc = nil
	file_data_node_proto_proto_goTypes = nil
	file_data_node_proto_proto_depIdxs = nil
}
