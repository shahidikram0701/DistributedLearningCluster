// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: data_node_proto.proto

package process

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DataNodeServiceClient is the client API for DataNodeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataNodeServiceClient interface {
	DataNode_PutFile(ctx context.Context, opts ...grpc.CallOption) (DataNodeService_DataNode_PutFileClient, error)
	DataNode_CommitFile(ctx context.Context, in *DataNode_CommitFileRequest, opts ...grpc.CallOption) (*DataNode_CommitFileResponse, error)
	DataNode_UpdateSequenceNumber(ctx context.Context, in *DataNode_UpdateSequenceNumberRequest, opts ...grpc.CallOption) (*DataNode_UpdateSequenceNumberResponse, error)
	DataNode_InitiateReplicaRecovery(ctx context.Context, in *DataNode_InitiateReplicaRecoveryRequest, opts ...grpc.CallOption) (*DataNode_InitiateReplicaRecoveryResponse, error)
	DataNode_ReplicaRecovery(ctx context.Context, in *DataNode_ReplicaRecoveryRequest, opts ...grpc.CallOption) (DataNodeService_DataNode_ReplicaRecoveryClient, error)
	DataNode_GetFile(ctx context.Context, in *DataNode_GetFileRequest, opts ...grpc.CallOption) (DataNodeService_DataNode_GetFileClient, error)
	DataNode_GetFileQuorum(ctx context.Context, in *DataNode_GetFileQuorumRequest, opts ...grpc.CallOption) (*DataNode_GetFileQuorumResponse, error)
	DataNode_DeleteFileQuorumCheck(ctx context.Context, in *DataNode_DeleteFileQuorumCheckRequest, opts ...grpc.CallOption) (*DataNode_DeleteFileQuorumCheckResponse, error)
	DataNode_CommitDelete(ctx context.Context, in *DataNode_CommitDeleteRequest, opts ...grpc.CallOption) (*DataNode_CommitDeleteResponse, error)
	DataNode_GetFileVersions(ctx context.Context, in *DataNode_GetFileVersionsRequest, opts ...grpc.CallOption) (DataNodeService_DataNode_GetFileVersionsClient, error)
}

type dataNodeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDataNodeServiceClient(cc grpc.ClientConnInterface) DataNodeServiceClient {
	return &dataNodeServiceClient{cc}
}

func (c *dataNodeServiceClient) DataNode_PutFile(ctx context.Context, opts ...grpc.CallOption) (DataNodeService_DataNode_PutFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &DataNodeService_ServiceDesc.Streams[0], "/process.DataNodeService/DataNode_PutFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &dataNodeServiceDataNode_PutFileClient{stream}
	return x, nil
}

type DataNodeService_DataNode_PutFileClient interface {
	Send(*Chunk) error
	CloseAndRecv() (*DataNode_PutFile_Response, error)
	grpc.ClientStream
}

type dataNodeServiceDataNode_PutFileClient struct {
	grpc.ClientStream
}

func (x *dataNodeServiceDataNode_PutFileClient) Send(m *Chunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dataNodeServiceDataNode_PutFileClient) CloseAndRecv() (*DataNode_PutFile_Response, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(DataNode_PutFile_Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dataNodeServiceClient) DataNode_CommitFile(ctx context.Context, in *DataNode_CommitFileRequest, opts ...grpc.CallOption) (*DataNode_CommitFileResponse, error) {
	out := new(DataNode_CommitFileResponse)
	err := c.cc.Invoke(ctx, "/process.DataNodeService/DataNode_CommitFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataNodeServiceClient) DataNode_UpdateSequenceNumber(ctx context.Context, in *DataNode_UpdateSequenceNumberRequest, opts ...grpc.CallOption) (*DataNode_UpdateSequenceNumberResponse, error) {
	out := new(DataNode_UpdateSequenceNumberResponse)
	err := c.cc.Invoke(ctx, "/process.DataNodeService/DataNode_UpdateSequenceNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataNodeServiceClient) DataNode_InitiateReplicaRecovery(ctx context.Context, in *DataNode_InitiateReplicaRecoveryRequest, opts ...grpc.CallOption) (*DataNode_InitiateReplicaRecoveryResponse, error) {
	out := new(DataNode_InitiateReplicaRecoveryResponse)
	err := c.cc.Invoke(ctx, "/process.DataNodeService/DataNode_InitiateReplicaRecovery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataNodeServiceClient) DataNode_ReplicaRecovery(ctx context.Context, in *DataNode_ReplicaRecoveryRequest, opts ...grpc.CallOption) (DataNodeService_DataNode_ReplicaRecoveryClient, error) {
	stream, err := c.cc.NewStream(ctx, &DataNodeService_ServiceDesc.Streams[1], "/process.DataNodeService/DataNode_ReplicaRecovery", opts...)
	if err != nil {
		return nil, err
	}
	x := &dataNodeServiceDataNode_ReplicaRecoveryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DataNodeService_DataNode_ReplicaRecoveryClient interface {
	Recv() (*FileChunk, error)
	grpc.ClientStream
}

type dataNodeServiceDataNode_ReplicaRecoveryClient struct {
	grpc.ClientStream
}

func (x *dataNodeServiceDataNode_ReplicaRecoveryClient) Recv() (*FileChunk, error) {
	m := new(FileChunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dataNodeServiceClient) DataNode_GetFile(ctx context.Context, in *DataNode_GetFileRequest, opts ...grpc.CallOption) (DataNodeService_DataNode_GetFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &DataNodeService_ServiceDesc.Streams[2], "/process.DataNodeService/DataNode_GetFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &dataNodeServiceDataNode_GetFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DataNodeService_DataNode_GetFileClient interface {
	Recv() (*FileChunk, error)
	grpc.ClientStream
}

type dataNodeServiceDataNode_GetFileClient struct {
	grpc.ClientStream
}

func (x *dataNodeServiceDataNode_GetFileClient) Recv() (*FileChunk, error) {
	m := new(FileChunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dataNodeServiceClient) DataNode_GetFileQuorum(ctx context.Context, in *DataNode_GetFileQuorumRequest, opts ...grpc.CallOption) (*DataNode_GetFileQuorumResponse, error) {
	out := new(DataNode_GetFileQuorumResponse)
	err := c.cc.Invoke(ctx, "/process.DataNodeService/DataNode_GetFileQuorum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataNodeServiceClient) DataNode_DeleteFileQuorumCheck(ctx context.Context, in *DataNode_DeleteFileQuorumCheckRequest, opts ...grpc.CallOption) (*DataNode_DeleteFileQuorumCheckResponse, error) {
	out := new(DataNode_DeleteFileQuorumCheckResponse)
	err := c.cc.Invoke(ctx, "/process.DataNodeService/DataNode_DeleteFileQuorumCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataNodeServiceClient) DataNode_CommitDelete(ctx context.Context, in *DataNode_CommitDeleteRequest, opts ...grpc.CallOption) (*DataNode_CommitDeleteResponse, error) {
	out := new(DataNode_CommitDeleteResponse)
	err := c.cc.Invoke(ctx, "/process.DataNodeService/DataNode_CommitDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataNodeServiceClient) DataNode_GetFileVersions(ctx context.Context, in *DataNode_GetFileVersionsRequest, opts ...grpc.CallOption) (DataNodeService_DataNode_GetFileVersionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &DataNodeService_ServiceDesc.Streams[3], "/process.DataNodeService/DataNode_GetFileVersions", opts...)
	if err != nil {
		return nil, err
	}
	x := &dataNodeServiceDataNode_GetFileVersionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DataNodeService_DataNode_GetFileVersionsClient interface {
	Recv() (*FileChunk, error)
	grpc.ClientStream
}

type dataNodeServiceDataNode_GetFileVersionsClient struct {
	grpc.ClientStream
}

func (x *dataNodeServiceDataNode_GetFileVersionsClient) Recv() (*FileChunk, error) {
	m := new(FileChunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DataNodeServiceServer is the server API for DataNodeService service.
// All implementations must embed UnimplementedDataNodeServiceServer
// for forward compatibility
type DataNodeServiceServer interface {
	DataNode_PutFile(DataNodeService_DataNode_PutFileServer) error
	DataNode_CommitFile(context.Context, *DataNode_CommitFileRequest) (*DataNode_CommitFileResponse, error)
	DataNode_UpdateSequenceNumber(context.Context, *DataNode_UpdateSequenceNumberRequest) (*DataNode_UpdateSequenceNumberResponse, error)
	DataNode_InitiateReplicaRecovery(context.Context, *DataNode_InitiateReplicaRecoveryRequest) (*DataNode_InitiateReplicaRecoveryResponse, error)
	DataNode_ReplicaRecovery(*DataNode_ReplicaRecoveryRequest, DataNodeService_DataNode_ReplicaRecoveryServer) error
	DataNode_GetFile(*DataNode_GetFileRequest, DataNodeService_DataNode_GetFileServer) error
	DataNode_GetFileQuorum(context.Context, *DataNode_GetFileQuorumRequest) (*DataNode_GetFileQuorumResponse, error)
	DataNode_DeleteFileQuorumCheck(context.Context, *DataNode_DeleteFileQuorumCheckRequest) (*DataNode_DeleteFileQuorumCheckResponse, error)
	DataNode_CommitDelete(context.Context, *DataNode_CommitDeleteRequest) (*DataNode_CommitDeleteResponse, error)
	DataNode_GetFileVersions(*DataNode_GetFileVersionsRequest, DataNodeService_DataNode_GetFileVersionsServer) error
	mustEmbedUnimplementedDataNodeServiceServer()
}

// UnimplementedDataNodeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDataNodeServiceServer struct {
}

func (UnimplementedDataNodeServiceServer) DataNode_PutFile(DataNodeService_DataNode_PutFileServer) error {
	return status.Errorf(codes.Unimplemented, "method DataNode_PutFile not implemented")
}
func (UnimplementedDataNodeServiceServer) DataNode_CommitFile(context.Context, *DataNode_CommitFileRequest) (*DataNode_CommitFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DataNode_CommitFile not implemented")
}
func (UnimplementedDataNodeServiceServer) DataNode_UpdateSequenceNumber(context.Context, *DataNode_UpdateSequenceNumberRequest) (*DataNode_UpdateSequenceNumberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DataNode_UpdateSequenceNumber not implemented")
}
func (UnimplementedDataNodeServiceServer) DataNode_InitiateReplicaRecovery(context.Context, *DataNode_InitiateReplicaRecoveryRequest) (*DataNode_InitiateReplicaRecoveryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DataNode_InitiateReplicaRecovery not implemented")
}
func (UnimplementedDataNodeServiceServer) DataNode_ReplicaRecovery(*DataNode_ReplicaRecoveryRequest, DataNodeService_DataNode_ReplicaRecoveryServer) error {
	return status.Errorf(codes.Unimplemented, "method DataNode_ReplicaRecovery not implemented")
}
func (UnimplementedDataNodeServiceServer) DataNode_GetFile(*DataNode_GetFileRequest, DataNodeService_DataNode_GetFileServer) error {
	return status.Errorf(codes.Unimplemented, "method DataNode_GetFile not implemented")
}
func (UnimplementedDataNodeServiceServer) DataNode_GetFileQuorum(context.Context, *DataNode_GetFileQuorumRequest) (*DataNode_GetFileQuorumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DataNode_GetFileQuorum not implemented")
}
func (UnimplementedDataNodeServiceServer) DataNode_DeleteFileQuorumCheck(context.Context, *DataNode_DeleteFileQuorumCheckRequest) (*DataNode_DeleteFileQuorumCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DataNode_DeleteFileQuorumCheck not implemented")
}
func (UnimplementedDataNodeServiceServer) DataNode_CommitDelete(context.Context, *DataNode_CommitDeleteRequest) (*DataNode_CommitDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DataNode_CommitDelete not implemented")
}
func (UnimplementedDataNodeServiceServer) DataNode_GetFileVersions(*DataNode_GetFileVersionsRequest, DataNodeService_DataNode_GetFileVersionsServer) error {
	return status.Errorf(codes.Unimplemented, "method DataNode_GetFileVersions not implemented")
}
func (UnimplementedDataNodeServiceServer) mustEmbedUnimplementedDataNodeServiceServer() {}

// UnsafeDataNodeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataNodeServiceServer will
// result in compilation errors.
type UnsafeDataNodeServiceServer interface {
	mustEmbedUnimplementedDataNodeServiceServer()
}

func RegisterDataNodeServiceServer(s grpc.ServiceRegistrar, srv DataNodeServiceServer) {
	s.RegisterService(&DataNodeService_ServiceDesc, srv)
}

func _DataNodeService_DataNode_PutFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DataNodeServiceServer).DataNode_PutFile(&dataNodeServiceDataNode_PutFileServer{stream})
}

type DataNodeService_DataNode_PutFileServer interface {
	SendAndClose(*DataNode_PutFile_Response) error
	Recv() (*Chunk, error)
	grpc.ServerStream
}

type dataNodeServiceDataNode_PutFileServer struct {
	grpc.ServerStream
}

func (x *dataNodeServiceDataNode_PutFileServer) SendAndClose(m *DataNode_PutFile_Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dataNodeServiceDataNode_PutFileServer) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DataNodeService_DataNode_CommitFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataNode_CommitFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataNodeServiceServer).DataNode_CommitFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/process.DataNodeService/DataNode_CommitFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataNodeServiceServer).DataNode_CommitFile(ctx, req.(*DataNode_CommitFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataNodeService_DataNode_UpdateSequenceNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataNode_UpdateSequenceNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataNodeServiceServer).DataNode_UpdateSequenceNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/process.DataNodeService/DataNode_UpdateSequenceNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataNodeServiceServer).DataNode_UpdateSequenceNumber(ctx, req.(*DataNode_UpdateSequenceNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataNodeService_DataNode_InitiateReplicaRecovery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataNode_InitiateReplicaRecoveryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataNodeServiceServer).DataNode_InitiateReplicaRecovery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/process.DataNodeService/DataNode_InitiateReplicaRecovery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataNodeServiceServer).DataNode_InitiateReplicaRecovery(ctx, req.(*DataNode_InitiateReplicaRecoveryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataNodeService_DataNode_ReplicaRecovery_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DataNode_ReplicaRecoveryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DataNodeServiceServer).DataNode_ReplicaRecovery(m, &dataNodeServiceDataNode_ReplicaRecoveryServer{stream})
}

type DataNodeService_DataNode_ReplicaRecoveryServer interface {
	Send(*FileChunk) error
	grpc.ServerStream
}

type dataNodeServiceDataNode_ReplicaRecoveryServer struct {
	grpc.ServerStream
}

func (x *dataNodeServiceDataNode_ReplicaRecoveryServer) Send(m *FileChunk) error {
	return x.ServerStream.SendMsg(m)
}

func _DataNodeService_DataNode_GetFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DataNode_GetFileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DataNodeServiceServer).DataNode_GetFile(m, &dataNodeServiceDataNode_GetFileServer{stream})
}

type DataNodeService_DataNode_GetFileServer interface {
	Send(*FileChunk) error
	grpc.ServerStream
}

type dataNodeServiceDataNode_GetFileServer struct {
	grpc.ServerStream
}

func (x *dataNodeServiceDataNode_GetFileServer) Send(m *FileChunk) error {
	return x.ServerStream.SendMsg(m)
}

func _DataNodeService_DataNode_GetFileQuorum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataNode_GetFileQuorumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataNodeServiceServer).DataNode_GetFileQuorum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/process.DataNodeService/DataNode_GetFileQuorum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataNodeServiceServer).DataNode_GetFileQuorum(ctx, req.(*DataNode_GetFileQuorumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataNodeService_DataNode_DeleteFileQuorumCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataNode_DeleteFileQuorumCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataNodeServiceServer).DataNode_DeleteFileQuorumCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/process.DataNodeService/DataNode_DeleteFileQuorumCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataNodeServiceServer).DataNode_DeleteFileQuorumCheck(ctx, req.(*DataNode_DeleteFileQuorumCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataNodeService_DataNode_CommitDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataNode_CommitDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataNodeServiceServer).DataNode_CommitDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/process.DataNodeService/DataNode_CommitDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataNodeServiceServer).DataNode_CommitDelete(ctx, req.(*DataNode_CommitDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataNodeService_DataNode_GetFileVersions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DataNode_GetFileVersionsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DataNodeServiceServer).DataNode_GetFileVersions(m, &dataNodeServiceDataNode_GetFileVersionsServer{stream})
}

type DataNodeService_DataNode_GetFileVersionsServer interface {
	Send(*FileChunk) error
	grpc.ServerStream
}

type dataNodeServiceDataNode_GetFileVersionsServer struct {
	grpc.ServerStream
}

func (x *dataNodeServiceDataNode_GetFileVersionsServer) Send(m *FileChunk) error {
	return x.ServerStream.SendMsg(m)
}

// DataNodeService_ServiceDesc is the grpc.ServiceDesc for DataNodeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataNodeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "process.DataNodeService",
	HandlerType: (*DataNodeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DataNode_CommitFile",
			Handler:    _DataNodeService_DataNode_CommitFile_Handler,
		},
		{
			MethodName: "DataNode_UpdateSequenceNumber",
			Handler:    _DataNodeService_DataNode_UpdateSequenceNumber_Handler,
		},
		{
			MethodName: "DataNode_InitiateReplicaRecovery",
			Handler:    _DataNodeService_DataNode_InitiateReplicaRecovery_Handler,
		},
		{
			MethodName: "DataNode_GetFileQuorum",
			Handler:    _DataNodeService_DataNode_GetFileQuorum_Handler,
		},
		{
			MethodName: "DataNode_DeleteFileQuorumCheck",
			Handler:    _DataNodeService_DataNode_DeleteFileQuorumCheck_Handler,
		},
		{
			MethodName: "DataNode_CommitDelete",
			Handler:    _DataNodeService_DataNode_CommitDelete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DataNode_PutFile",
			Handler:       _DataNodeService_DataNode_PutFile_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DataNode_ReplicaRecovery",
			Handler:       _DataNodeService_DataNode_ReplicaRecovery_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DataNode_GetFile",
			Handler:       _DataNodeService_DataNode_GetFile_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DataNode_GetFileVersions",
			Handler:       _DataNodeService_DataNode_GetFileVersions_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "data_node_proto.proto",
}
